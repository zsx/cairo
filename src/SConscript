import tempfile
import re
import subprocess

Import('env')

env['PDB'] = 'libcairo.pdb'
execfile('../build/Makefile.win32.features')

def generate_features_h(target, source, env):
    fi = file(str(source[0]), 'r')
    fo = file(str(target[0]), 'w')
    comments = re.compile('^#')
    feature = re.compile(r'^\s*(\S+)\s*=\s*(\S+)\s*$')
    fo.write("/* Generated by Makefile.win32.  Do not edit. */\n")
    fo.write("#ifndef CAIRO_FEATURES_H\n")
    fo.write("#define CAIRO_FEATURES_H 1\n")
    
    for line in fi.readlines():
        if comments.match(line):
            continue
        mo = feature.match(line)
        if mo:
            if mo.group(2) == '1':
                fo.write('#define %s 1\n' % mo.group(1))

    fo.write('#endif')
    fi.close()
    fo.close()

env.Command('cairo-features.h', '#build/Makefile.win32.features', generate_features_h)

cairo_headers = Split("cairo.h cairo-deprecated.h")
cairo_sources =Split("\
	cairo-analysis-surface.c \
	cairo-arc.c \
	cairo-array.c \
	cairo-atomic.c \
	cairo-base64-stream.c \
	cairo-base85-stream.c \
	cairo-bentley-ottmann.c \
	cairo-bentley-ottmann-rectangular.c \
	cairo-bentley-ottmann-rectilinear.c \
	cairo.c \
	cairo-cache.c \
	cairo-clip.c \
	cairo-color.c \
	cairo-debug.c \
	cairo-fixed.c \
	cairo-font-face.c \
	cairo-font-face-twin.c \
	cairo-font-face-twin-data.c \
	cairo-font-options.c \
	cairo-freelist.c \
	cairo-gstate.c \
	cairo-hash.c \
	cairo-hull.c \
	cairo-image-info.c \
	cairo-image-surface.c \
	cairo-lzw.c \
	cairo-matrix.c \
	cairo-meta-surface.c \
	cairo-misc.c \
	cairo-mutex.c \
	cairo-output-stream.c \
	cairo-paginated-surface.c \
	cairo-path-bounds.c \
	cairo-path.c \
	cairo-path-fill.c \
	cairo-path-fixed.c \
	cairo-path-in-fill.c \
	cairo-path-stroke.c \
	cairo-pattern.c \
	cairo-pen.c \
	cairo-polygon.c \
	cairo-rectangle.c \
	cairo-region.c \
	cairo-rtree.c \
	cairo-scaled-font.c \
	cairo-slope.c \
	cairo-spans.c \
	cairo-spline.c \
	cairo-stroke-style.c \
	cairo-surface.c \
	cairo-surface-fallback.c \
	cairo-surface-clipper.c \
	cairo-surface-wrapper.c \
	cairo-system.c \
	cairo-tee-surface.c \
	cairo-tor-scan-converter.c \
	cairo-toy-font-face.c \
	cairo-traps.c \
	cairo-unicode.c \
	cairo-user-font.c \
	cairo-version.c \
	cairo-wideint.c")

_cairo_font_subset_sources = Split("\
	cairo-cff-subset.c \
	cairo-scaled-font-subsets.c \
	cairo-truetype-subset.c \
	cairo-type1-fallback.c \
	cairo-type1-subset.c \
        cairo-type3-glyph-surface.c")

cairo_sources += _cairo_font_subset_sources

_cairo_pdf_operators_sources = ['cairo-pdf-operators.c']
cairo_sources += _cairo_pdf_operators_sources

cairo_png_headers = []
cairo_png_sources = ['cairo-png.c']

cairo_ps_headers = ['cairo-ps.h']
cairo_ps_sources = ['cairo-ps-surface.c']

cairo_deflate_stream_sources = ['cairo-deflate-stream.c']

cairo_pdf_headers = ['cairo-pdf.h']
cairo_pdf_sources = ['cairo-pdf-surface.c']

if CAIRO_HAS_PDF_SURFACE:
    req_cairo_deflate_stream_sources = cairo_deflate_stream_sources

cairo_svg_headers = ['cairo-svg.h']
cairo_svg_sources = ['cairo-svg-surface.c']

cairo_ft_headers = ['cairo-ft.h']
cairo_ft_sources = ['cairo-ft-font.c']

# These are private, even though they look like public headers
cairo_test_surfaces_sources = Split("\
	test-fallback-surface.c \
	test-fallback16-surface.c \
	test-null-surface.c \
	test-paginated-surface.c \
	test-wrapping-surface.c")

cairo_win32_headers = ['cairo-win32.h']
cairo_win32_sources = Split("cairo-win32-surface.c cairo-win32-printing-surface.c")

cairo_win32_font_headers = []
cairo_win32_font_sources = ['cairo-win32-font.c']

cairo_skia_sources = ['cairo-skia-surface.cpp']

cairo_gl_headers = ['cairo-gl.h']
cairo_gl_sources = ['cairo-gl-surface.c', 'cairo-gl-glyphs.c']
cairo_glx_headers = []
cairo_glx_sources = ['cairo-glx-context.c']
cairo_eagle_headers = []
cairo_eagle_sources = ['cairo-eagle-context.c']

cairo_glitz_headers = ['cairo-glitz.h']
cairo_glitz_private = ['cairo-glitz-private.h']
cairo_glitz_sources = ['cairo-glitz-surface.c']

cairo_script_headers = ['cairo-script.h']
cairo_script_sources = ['cairo-script-surface.c']

cairo_xml_headers = ['cairo-xml.h']
cairo_xml_sources = ['cairo-xml-surface.c']
if CAIRO_HAS_XML_SURFACE:
    req_cairo_deflate_stream_sources = cairo_deflate_stream_sources

cairo_vg_headers = ['cairo-vg.h']
cairo_vg_sources = ['cairo-vg-surface.c']

cairo_sources += req_cairo_deflate_stream_sources
enabled_cairo_headers = cairo_headers
enabled_cairo_sources = cairo_sources
enabled_cairo_pkgconf = ['cairo.pc']

if CAIRO_HAS_WIN32_SURFACE:
    enabled_cairo_headers += cairo_win32_headers
    enabled_cairo_sources += cairo_win32_sources
    enabled_cairo_pkgconf += ['cairo-win32.pc']

if CAIRO_HAS_WIN32_FONT:
    enabled_cairo_headers += cairo_win32_font_headers
    enabled_cairo_sources += cairo_win32_font_sources
    enabled_cairo_pkgconf += ['cairo-win32-font.pc']

if CAIRO_HAS_PNG_FUNCTIONS:
    enabled_cairo_headers += cairo_png_headers
    enabled_cairo_sources += cairo_png_sources
    enabled_cairo_pkgconf += ['cairo-png.pc']

if CAIRO_HAS_GL_SURFACE:
    enabled_cairo_headers += cairo_gl_headers
    enabled_cairo_sources += cairo_gl_sources
    enabled_cairo_pkgconf += ['cairo-gl.pc']

if CAIRO_HAS_GLITZ_SURFACE:
    enabled_cairo_headers += cairo_glitz_headers
    enabled_cairo_sources += cairo_glitz_sources
    enabled_cairo_pkgconf += ['cairo-glitz.pc']

if CAIRO_HAS_VG_SURFACE:
    enabled_cairo_headers += cairo_vg_headers
    enabled_cairo_sources += cairo_vg_sources
    enabled_cairo_pkgconf += ['cairo-vg.pc']

if CAIRO_HAS_GLX_FUNCTIONS:
    enabled_cairo_headers += cairo_glx_headers
    enabled_cairo_sources += cairo_glx_sources
    enabled_cairo_pkgconf += ['cairo-glx.pc']

if CAIRO_HAS_EAGLE_FUNCTIONS:
    enabled_cairo_headers += cairo_eagle_headers
    enabled_cairo_sources += cairo_eagle_sources
    enabled_cairo_pkgconf += ['cairo-eagle.pc']

if CAIRO_HAS_SCRIPT_SURFACE:
    enabled_cairo_headers += cairo_script_headers
    enabled_cairo_sources += cairo_script_sources
    enabled_cairo_pkgconf += ['cairo-script.pc']

if CAIRO_HAS_FT_FONT:
    enabled_cairo_headers += cairo_ft_headers
    enabled_cairo_sources += cairo_ft_sources
    enabled_cairo_pkgconf += ['cairo-ft.pc']

if CAIRO_HAS_FC_FONT:
    enabled_cairo_headers += cairo_fc_headers
    enabled_cairo_sources += cairo_fc_sources
    enabled_cairo_pkgconf += ['cairo-fc.pc']

if CAIRO_HAS_PS_SURFACE:
    enabled_cairo_headers += cairo_ps_headers
    enabled_cairo_sources += cairo_ps_sources
    enabled_cairo_pkgconf += ['cairo-ps.pc']

if CAIRO_HAS_PDF_SURFACE:
    enabled_cairo_headers += cairo_pdf_headers
    enabled_cairo_sources += cairo_pdf_sources
    enabled_cairo_pkgconf += ['cairo-pdf.pc']

if CAIRO_HAS_SVG_SURFACE:
    enabled_cairo_headers += cairo_svg_headers
    enabled_cairo_sources += cairo_svg_sources
    enabled_cairo_pkgconf += ['cairo-svg.pc']
'''
enabled_cairo_headers += cairo_image_headers
enabled_cairo_sources += cairo_image_sources

enabled_cairo_headers += cairo_meta_headers
enabled_cairo_sources += cairo_meta_sources
'''

def generate_cairo_def(target, source, env):
    '''
    @echo Generating $@
    @(echo EXPORTS; \
    (cd $(srcdir); cat $(enabled_cairo_headers) || echo 'cairo_ERROR ()' ) | \
    grep -v -E '^# *include' | \
    ( cat cairo-features.h - | $(CPP) -D__cplusplus - || echo 'cairo_ERROR ()' ) | \
    grep -E '^cairo_.* \(' | \
    sed -e 's/[ 	].*//' | \
    sort; \
    echo LIBRARY libcairo-$(CAIRO_VERSION_SONUM).dll; \
    ) >$@
    @ ! grep -q cairo_ERROR $@ || ($(RM) $@; false)
    '''
    fo = file(str(target[0]), 'w')
    fo.write("EXPORTS\n")
    include = re.compile('^#\s*include')
    cairo = re.compile(r'^(cairo_.*)\s*\(')
    f = file('src/cairo-features.h', 'r')
    features = f.readlines()
    f.close()
    funcs = []
    for h in source:
        fi = file(str(h), 'r')
        ft, fn = tempfile.mkstemp(text = True)
        
        ftmp = os.fdopen(ft, "w")
        ftmp.writelines(features)
        for line in fi.readlines():
            if include.match(line):
                continue
            else:
                ftmp.write(line)
        ftmp.close()
        cpp = subprocess.Popen([env['CC']] + Split('/nologo /EP /D__cpluscplus ') + [fn], stdout=subprocess.PIPE).communicate()[0]

        fi.close()
        os.unlink(fn)

        lines = cpp.split('\r\n')
        for line in lines:
            mo = cairo.match(line)
            if mo:
                funcs.append(mo.group(1) + '\n')

    funcs.sort()
    fo.writelines(funcs)
    fo.close()

cairo_def_generator = env.Builder(action = generate_cairo_def, src_suffix = '.h')
env.Append(BUILDERS = {'CairoDefGenerator' : cairo_def_generator})

env.CairoDefGenerator('cairo.def', enabled_cairo_headers)
env.Depends('cairo.def', 'cairo-features.h')

env['DOT_IN_SUBS'] = {'@VERSION@' : env['CAIRO_VERSION'],
                      '@prefix@' : env['PREFIX'],
                      '@exec_prefix@' : '${prefix}/bin', 
                      '@libdir@' : '${prefix}/lib', 
                      '@includedir@' : '${prefix}/include',
                      '@PKGCONFIGREQUIRES': 'Requires',
                      '@FEATURE_BASE@' : '',
                      '@FEATURE_REQUIRES@': 'pixman-1 zlib',
                      '@CAIRO_NONPKGCONFIG_LIBS@': ''}

if CAIRO_HAS_PS_SURFACE:
    env_pkgconf_ps = env.Clone()
    env_pkgconf_ps['DOT_IN_SUBS']['@FEATURE_PC@'] = 'cairo-PS'
    env_pkgconf_ps['DOT_IN_SUBS']['@FEATURE_NAME@'] = 'cairo PS'
    env_pkgconf_ps['DOT_IN_SUBS']['@FEATURE_REQUIRES@'] = 'zlib'
    env_pkgconf_ps.DotIn('cairo-ps.pc', 'cairo-features.pc.in')
    env_pkgconf_ps.Alias('install', env_pkgconf_ps.Install('$PREFIX/lib/pkgconfig', 'cairo-ps.pc'))

if CAIRO_HAS_PDF_SURFACE:
    env_pkgconf_pdf = env.Clone()
    env_pkgconf_pdf['DOT_IN_SUBS']['@FEATURE_PC@'] = 'cairo-PDF'
    env_pkgconf_pdf['DOT_IN_SUBS']['@FEATURE_NAME@'] = 'cairo PDF'
    env_pkgconf_pdf['DOT_IN_SUBS']['@FEATURE_REQUIRES@'] = 'zlib'
    env_pkgconf_pdf.DotIn('cairo-pdf.pc', 'cairo-features.pc.in')
    env_pkgconf_pdf.Alias('install', env_pkgconf_pdf.Install('$PREFIX/lib/pkgconfig', 'cairo-pdf.pc'))

env.DotIn('cairo.pc', 'cairo.pc.in')

env.Alias('install', env.Install('$PREFIX/lib/pkgconfig', ['cairo.pc']))

env.Alias('install', env.Install('$PREFIX/include/cairo', enabled_cairo_headers))

env.ParseConfig('pkg-config pixman-1 --cflags --libs')
env.ParseConfig('pkg-config zlib --cflags --libs')
env.ParseConfig('pkg-config libpng12 --cflags --libs')
env.Append(LIBS = ['msimg32',  'gdi32', 'user32'])
dll = env.SharedLibrary(['libcairo' + env['LIB_SUFFIX'] + '.dll', 'cairo.lib'], enabled_cairo_sources + ['cairo.def'])
env.AddPostAction(dll, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
env.Alias('install', env.Install('$PREFIX/bin', 'libcairo' + env['LIB_SUFFIX'] + '.dll'))
env.Alias('install', env.Install('$PREFIX/lib', 'cairo.lib'))
